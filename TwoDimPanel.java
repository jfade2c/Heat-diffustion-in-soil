package ihm;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.geom.Ellipse2D;import java.awt.geom.Line2D;import java.text.DecimalFormat;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.SwingConstants;import metier.Temperature;import metier.Time;/*Creates a panel to be display representing the evolution of temperatureregarding to depth after a certain time */public class TwoDimPanel extends JPanel {    private double T;    private double T0;    private double Ti;    private double x;// equivalent to Xmax    private double t;    private double alpha;    private int Width;    private int Height;    Temperature Tempcur = new Temperature();    private static final DecimalFormat df = new DecimalFormat("0.00");    double[][] pointcoord =new double[100][2];//pcoord[][0] = x    int marg = 60;//Margins for readability        final Color myGrey = new Color(254,255,248);    final Color myGreyline = new Color(166,166,166);    final Color myGreyLab = new Color(118,113,113);            public TwoDimPanel(double T, double T0, double Ti, double x, double t,double alpha,int Width,int Height){        Time timecur = new Time();        Temperature tempcur = new Temperature();        this.T = T;        this.T0 = T0;        this.Ti = Ti;        this.x = x;        this.t = t;        this.alpha = alpha;        //Values array for each data point        for(int k=0;k<100;k++){            pointcoord[k][0]= (k+1)*(x/100);//x of each point            pointcoord[k][1]= tempcur.getT(pointcoord[k][0], Ti, T0, alpha, t);//x of each point        }                this.setLayout(new BorderLayout());         this.setBackground(myGrey);        this.setSize(new Dimension(1200,900));                JLabel titleLabel = new JLabel();        if(T0>Ti){//heating of the surface, T0>Ti            titleLabel.setText("Profil de température après "+df.format(timecur.gettshou(this.t))+" h de réchauffage, jusqu'à "+df.format(x)+"m");        }        else{//cooling, T0<Ti            titleLabel.setText("Profil de température après "+df.format(timecur.gettshou(this.t))+" h de refroidissement, jusqu'à "+df.format(x)+"m");        }                titleLabel.setBackground(myGrey); //titre        titleLabel.setFont(new Font( "FUTURA", Font.ITALIC,22));//defines font        titleLabel.setForeground(Color.BLACK);        this.add(titleLabel, BorderLayout.NORTH);        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);        titleLabel.setVisible(true);                JLabel tempLabel = new JLabel("<html> "+"<br>"+"<br>"+"<br>"+"<br>"                +"T\n"+"<br>"+"e\n"+"<br>"+"m\n"+"<br>"                +"p\n"+"<br>"+"é\n"+"<br>"+"r\n"+"<br>"+"a\n"+"<br>"+"t\n"                +"<br>"+"u\n"+"<br>"+"r\n"+"<br>"+"e\n"+"<br>"+"<br>"+"en\n"                +"<br>"+"<br>"+"°C<html>");        //Unorthodox way to get a vertical Temperature Label                tempLabel.setFont(new Font( "FUTURA", Font.ITALIC,18));         tempLabel.setForeground(Color.BLACK);        JPanel tempPanel = new JPanel();//Pour ne pas coller         tempPanel.setPreferredSize(new Dimension(marg-10, Height-(2*marg)));        tempPanel.add(tempLabel);        this.add(tempPanel, BorderLayout.WEST);        tempLabel.setHorizontalAlignment((int) JLabel.LEFT_ALIGNMENT);        tempLabel.setVerticalAlignment(JLabel.CENTER);        tempPanel.setBackground(myGrey);        tempLabel.setVisible(true);                JLabel positionLabel = new JLabel("Position (m)");        positionLabel.setFont(new Font( "FUTURA", Font.ITALIC,18));         positionLabel.setForeground(Color.BLACK);        JPanel positionPanel = new JPanel();        positionPanel.add(positionLabel);        this.add(positionPanel, BorderLayout.SOUTH);        positionLabel.setVerticalAlignment(JLabel.CENTER);        positionPanel.setBackground(myGrey);        tempLabel.setVisible(true);    }//End of twoDim méthode        @Override    protected void paintComponent(Graphics grf){          //instantiation of Graphics          super.paintComponent(grf);          Graphics2D g = (Graphics2D)grf;                  int width = getWidth();        int height = getHeight();                        // Axes        int h=15;        g.draw(new Line2D.Double(marg, marg, marg, height-marg));// axe des Y         g.fillPolygon(new int[] {marg,marg+(h/4),marg-(h/4)}, new int[] {marg-(h/2),marg+(h/2),marg+(h/2)}, 3);                g.draw(new Line2D.Double(marg, height-marg, width-marg, height-marg));// axe des X        g.fillPolygon(new int[] {width-marg-(h/2),width-marg+(h/2),width-marg-(h/2)}, new int[] {height-marg-(h/4),height-marg,height-marg+(h/4)}, 3);                //grid        for(int i=1;i<9;i++){            g.setColor(myGreyline);            g.draw(new Line2D.Double(marg+(i*(0.95*((width-(2*marg)))/8)), marg, marg+(i*(0.95*((width-(2*marg)))/8)), height-marg));        }// Vertical grid lines        for(int i=0;i<7;i++){            g.setColor(myGreyline);            g.draw(new Line2D.Double(marg, height-marg-(i*(0.95*((height-(2*marg)))/6))-15, width-marg, height-marg-(i*(0.95*((height-(2*marg)))/6))-15));        }// Horizontal grid lines                // Small Scale Labels        // Position Labels        String[] scaleposition = new String [9];//Un pour chaque ligne verticale+1 pour l'axe, donc 9 labels en tout        g.setPaint(myGreyLab);        for(int i=0;i<9;i++){            scaleposition[i]=String.valueOf(df.format(i*(x/8)));            g.drawString(scaleposition[i],(int)(marg+(i*(0.95*((width-(2*marg)))/8))-(width/105)), (int)(height-(marg)+15));            }                // Temperature Labels        String[] scaletemp = new String [7];//One for each horizontal line, so 7 labels in total        g.setPaint(myGreyLab);        if(T0>Ti){//Heating, T0>Ti            for(int i=0;i<7;i++){            scaleposition[i]=String.valueOf(df.format(Tempcur.getTC(T+(i*((T0-T)/6)))+273.15));            g.drawString(scaleposition[i],(int)(marg), (int)(height-marg-(i*(0.95*((height-(2*marg)))/6))-3));            }        }        else{//Cooling, T0<Ti            for(int i=0;i<7;i++){                scaleposition[i]=String.valueOf(df.format(Tempcur.getTC(T0+i*((T-T0)/6))+273.15));                g.drawString(scaleposition[i],(int)(marg), (int)(height-marg-(i*(0.95*((height-(2*marg)))/6))-3));            }        }                //Points color        g.setPaint(Color.RED);                //Plotting        if(T0>Ti){//heating            for(int c=0; c<100; c++){//c is loop index for heating                int x2D = (int) Math.round(0.95*(width-(2*marg))*(pointcoord[c][0]/x));// Graph x                int y3D = (int) Math.round(((pointcoord[c][1]-T)/(T0-T))*0.95*(height-(2*marg)));// Graph y                g.fill(new Ellipse2D.Double(marg+x2D, height-marg-y3D, 5, 5));            }        } else {//Cooling, T0<Ti            for(int r=0; r<100; r++){//c is loop index for cooling                int x2D = (int) Math.round(0.95*(width-(2*marg))*(pointcoord[r][0]/x));// Graph x                int y3D = (int) Math.round(((pointcoord[r][1]-T0)/(T-T0))*0.95*(height-(2*marg)));// Graph y                g.fill(new Ellipse2D.Double(marg+x2D, height-marg-y3D-15, 5, 5));            }// End of for        }//End of else else    }//End of  paintComponent}//End of twoDim class